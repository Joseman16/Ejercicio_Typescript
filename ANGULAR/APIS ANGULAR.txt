// Definimos una interfaz para tipar los datos
interface User {
  id?: number;
  name: string;
  email: string;
}

// Clase para manejar la API
class ApiService {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  // GET - obtener todos los usuarios
  async getUsers(): Promise<User[]> {
    const response = await fetch(this.baseUrl);
    return response.json();
  }

  // GET - obtener usuario por ID
  async getUserById(id: number): Promise<User> {
    const response = await fetch(`${this.baseUrl}/${id}`);
    return response.json();
  }

  // POST - crear usuario
  async createUser(user: User): Promise<User> {
    const response = await fetch(this.baseUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(user)
    });
    return response.json();
  }

  // PUT - actualizar usuario
  async updateUser(id: number, user: User): Promise<User> {
    const response = await fetch(`${this.baseUrl}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(user)
    });
    return response.json();
  }

  // DELETE - eliminar usuario
  async deleteUser(id: number): Promise<void> {
    await fetch(`${this.baseUrl}/${id}`, { method: 'DELETE' });
  }
}

// -----------------
// Uso del servicio
// -----------------
(async () => {
  const api = new ApiService('https://jsonplaceholder.typicode.com/users');

  // GET todos
  const users = await api.getUsers();
  console.log("Usuarios:", users);

  // POST
  const newUser = await api.createUser({ name: "Carlos", email: "carlos@test.com" });
  console.log("Usuario creado:", newUser);

  // PUT
  const updatedUser = await api.updateUser(1, { name: "Carlos Editado", email: "nuevo@test.com" });
  console.log("Usuario actualizado:", updatedUser);

  // DELETE
  await api.deleteUser(1);
  console.log("Usuario eliminado");
})();
